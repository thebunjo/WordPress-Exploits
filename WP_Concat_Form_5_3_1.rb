require 'httparty'
require 'optparse'
require 'eventmachine'

class WP_Upload_Check
  def initialize
    @headers = {
      'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0'
    }

    @vuln_urls = []
    @threads = []

    @params = {
      input_file: nil,
      output_file: "output_file.txt",
    }
  end

  def detect_plugin_version(readme)
    start_tag = "Stable tag: "
    version_start_index = readme.index(start_tag)
    raise "Invalid readme format: 'Stable tag: ' not found." if version_start_index.nil?

    version_end_index = readme.index("\n", version_start_index)
    raise "Invalid readme format: Version end tag not found." if version_end_index.nil?

    plugin_version = readme[version_start_index + start_tag.length, version_end_index - version_start_index - start_tag.length]
    raise "Plugin version is missing." if plugin_version.empty?

    plugin_version
  end

  def opt_parse
    begin
      OptionParser.new do |opts|
        opts.on "-i", "--input_file INPUT_FILE" do |input_file|
          if File.exist?(input_file)
            @params[:input_file] = input_file
          else
            puts("File not found: #{input_file}".red)
            exit(1)
          end
        end

        opts.on "-o", "--output_file OUTPUT_FILE" do |output_file|
          @params[:output_file] = output_file
        end
      end.parse!
    rescue Exception => exception
      puts("Error: #{exception}".red)
    end
  end

  def check_site(domain, output_file)
    target_domain = URI.parse(domain)
    ssl = target_domain.scheme == "https" ? true : false
    plugin_url = "#{target_domain.scheme}://#{target_domain.host}/wp-content/plugins/contact-form-7/readme.txt"

    begin
      response = HTTParty.get(plugin_url, headers: @headers, timeout: 3)

      if response.code == 200
        plugin_version = detect_plugin_version(response.body)
        is_vuln = Gem::Version.new(plugin_version) < Gem::Version.new('5.3.2')

        if output_file and is_vuln
          unless @vuln_urls.include?(domain)
            @vuln_urls << domain
            puts("#{plugin_url} --> Vuln".green)
            File.open(output_file, 'a+') do |file|
              file.puts(plugin_url)
            end
          end
        else
          puts("#{plugin_url} --> Not Vuln".red)
        end
      else
        puts("#{plugin_url} --> Not Vuln".red)
      end
    rescue Net::OpenTimeout
      puts("#{plugin_url} --> Not Vuln".red)
    rescue StandardError => err
      puts("#{plugin_url} --> Not Vuln".red)
    end
  end

  def print_help
    help_text = <<-'HELP_TEXT'
USAGE: ruby WP_Concat_Form_5_3_1 [options]

OPTIONS:
  -i, --input_file FILE: Define the path to the URL file.
  -o, --output_file FILE: Define the name of the output log file.
    HELP_TEXT

    puts(help_text.magenta)
  end

  def parse_lines(group)
    group.each do |line|
      check_site(line.strip, @params[:output_file])
    end
  end

  def main
    opt_parse

    unless @params[:input_file].nil?
      lines = File.readlines(@params[:input_file])

      lines.each_slice(4) do |group_lines|
        @threads << Thread.new {parse_lines(group_lines)}
      end

      @threads.each(&:join)
      puts()
      puts("Exploit completed.".magenta)

      EM.stop
    else
      print_help
      EM.stop
    end
  end
end

class String
  def red
    "\e[31m#{self}\e[0m"
  end

  def green
    "\e[32m#{self}\e[0m"
  end

  def magenta
    "\e[35m#{self}\e[0m"
  end
end

EM.run do
  begin
    EM.defer do
      upload_checker = WP_Upload_Check.new
      upload_checker.main
    end
  rescue => error
    puts("Error: #{error}")
  end
end
